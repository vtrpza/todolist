{"version":3,"sources":["components/todoList.js","App.js","serviceWorker.js","index.js"],"names":["Title","styled","h1","Wrapper","section","Input","input","Button","button","ListItem","p","ErrorMessage","span","TodoList","useEffect","retriviedListItem","JSON","parse","localStorage","getItem","addListItem","useState","listItem","text","addText","error","toggleError","onChange","el","target","value","length","onClick","newListItem","push","setItem","stringify","map","i","FlexBox","div","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"q/CAGA,IAAMA,EAAQC,IAAOC,GAAV,KAMLC,EAAUF,IAAOG,QAAV,KAOPC,EAAQJ,IAAOK,MAAV,KAQLC,EAASN,IAAOO,OAAV,IAWIH,GAKVI,EAAWR,IAAOS,EAAV,KASRC,EAAeV,IAAOW,KAAV,KA+CHC,MAvCf,WAEIC,qBAAU,WACN,IAAMC,EAAoBC,KAAKC,MAAMC,aAAaC,QAAQ,aAC1DC,EAAYL,KACb,IALa,MAOgBM,mBAAS,IAPzB,mBAOTC,EAPS,KAOCF,EAPD,OAQQC,mBAAS,IARjB,mBAQTE,EARS,KAQHC,EARG,OASaH,oBAAS,GATtB,mBASTI,EATS,KASFC,EATE,KA2BhB,OACI,kBAACvB,EAAD,KACI,kBAACH,EAAD,kBACCyB,EAAQ,kBAACd,EAAD,kCAAsD,GAC/D,kBAACN,EAAD,CAAOsB,SApBE,SAACC,GACdJ,EAAQI,EAAGC,OAAOC,QACdF,EAAGC,OAAOC,MAAMC,QAAU,GAAgC,IAA3BH,EAAGC,OAAOC,MAAMC,SAAcL,GAAY,MAkB5C,kBAACnB,EAAD,CAAQyB,QAfxB,WACjB,IAAMC,EAAcX,EAAQ,YAAOA,GAAY,GAC3CC,EAAKQ,QAAU,GACfE,EAAYC,KAAKX,GACjBH,EAAYa,GACZf,aAAaiB,QAAQ,WAAYnB,KAAKoB,UAAUH,KAEhDP,GAAY,KAQiB,OAC5BJ,EAAWA,EAASe,KAAI,SAACT,EAAIU,GAC1B,OAAO,kBAAC7B,EAAD,KAAWmB,MACjB,K,sICvFjB,IAAMW,EAAUtC,IAAOuC,IAAV,KAcEC,MARf,WACE,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,QCDcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMmC,c","file":"static/js/main.38b61dc0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst Title = styled.h1`\n    font-size: 1.5em;\n    text-align: center;\n    font-family: 'Lato', sans-serif;\n`;\n\nconst Wrapper = styled.section`  \n    padding: 2em 5em;\n    min-width: 400px;\n    height: 60%;\n    position: relative;\n`;\n\nconst Input = styled.input`\n    padding:5px; \n    border:2px solid #ccc; \n    -webkit-border-radius: 5px;\n    border-radius: 5px;\n    width: 100%;\n`;\n\nconst Button = styled.button`\n    padding: 5px 15px;\n    background: #ccc;\n    border: 0 none;\n    cursor: pointer;\n    margin-top: 6px;\n    -webkit-border-radius: 5px;\n    border-radius: 5px;\n    position: absolute;\n    top: 7.3em;\n    right: 1px;\n    &:focus ~ ${Input} {\n        background-color: #333;\n    }\n`;\n\nconst ListItem = styled.p`\n    padding: 10px;\n    font-family: 'Lato', sans-serif;\n    background: rgba(98, 218, 98, 0.3);\n    width: 100%;\n    border-radius: 4px;\n    border-bottom: 2px solid #000000;\n`;\n\nconst ErrorMessage = styled.span`\n    color: red;\n    font-size: 12px;\n    font-family: 'Lato', sans-serif;\n    position: absolute;\n    top: 7em;\n`;\n\nfunction TodoList() {\n\n    useEffect(() => {\n        const retriviedListItem = JSON.parse(localStorage.getItem('listItem'));\n        addListItem(retriviedListItem);\n    }, []);\n\n    const [listItem, addListItem] = useState([]);\n    const [text, addText] = useState('');\n    const [error, toggleError] = useState(false);\n\n    const onChange = (el) => {\n        addText(el.target.value);\n        if (el.target.value.length >= 5 || el.target.value.length === 0) toggleError(false);\n    }\n\n    const handleAction = () => {\n        const newListItem = listItem ? [...listItem] : [];\n        if (text.length >= 5) {\n            newListItem.push(text);\n            addListItem(newListItem);\n            localStorage.setItem('listItem', JSON.stringify(newListItem));\n        } else {\n            toggleError(true);\n        }\n    }\n\n    return (\n        <Wrapper>\n            <Title>Todo List</Title>\n            {error ? <ErrorMessage>MÃ­nimo de 5 caracteres</ErrorMessage> : ''}\n            <Input onChange={onChange} /><Button onClick={handleAction}>Add</Button>\n            {listItem ? listItem.map((el, i) => {\n                return <ListItem>{el}</ListItem>\n            }) : ''}\n        </Wrapper>\n    );\n}\n\nexport default TodoList;\n","import React from 'react';\nimport TodoList from './components/todoList'\nimport styled from 'styled-components';\n\nconst FlexBox = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 12em;\n`\n\nfunction App() {\n  return (\n    <FlexBox>\n      <TodoList/>\n    </FlexBox>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}